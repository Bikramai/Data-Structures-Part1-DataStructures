1. loop
public class Main {
    public void log(int[] numbers) {
        // O(n)
        for (int i = 0; i < numbers.length; i++)
            System.out.println(number);
    }
}
Explanation of O(n) Or Linear Time Complexity:-
Here we always have loop. So we are iterating over the items over the array, and
printing each item in the console. --->This is where the size of the input matters.

If we have a single item in this array, we're going to have one print operation.
If we have million items, Obviously we're going to have a million print operations.

So the cost of this algorithm grows linearly and in direct correlation to the size
of the input. So, we represent the runtime complexity of this method, --->using big-O(n),
where n represents the size of the input.

So as n grows, the cost of this algorithm also grows linearly, now it doesn't matter
what kind of loop we use to iterate over this array, here we're using a traditional for
loop, or a for each loop, or we can also use a while loop, or a do while loop.

2. Print statement before and after our loop
public class Main {
    public void log(int[] numbers) {
        // O(1 + n + 1) = O(2 + n) => O(n)
        System.out.println();// O(1)
        for (int number : numbers) // O(n)
            System.out.println(number);
        System.out.println(); // O(1)
    }
}
Explanation of O(n) Or Linear Time Complexity:-
what if we have print statement before and after our loop? What do you think is the
runtime complexity of the method?
Well, we saw that these single operations run in constant time, so here we have the Big-O(1)
Our loop runs in big-O(n), and once again, we have a Big-O(1).
So the run time complexity of this method is O(1 + n + 1) = O(2 + n).
However, when using the Big-o notation, we always drop these constants coz they don't really matter.

Here's the reason, if our array has one million inputs, adding 2 extra operations doesn't
really have a significant input on the cost of our algorithm. The cost of our algorithm
still increases linear, so we can simplify this by dropping this constant, What matters
is that the cost of this algorithm increases linearly and in direct proportion to the
size of our input. If we have 5 items in the input, we're going to have 5 operations.
If we have a million items, we're going to have a million operations.


3. Two loops
public class Main {
    public void log(int[] numbers) {
        // O(n + n)=O(2n) // so we drop number always
        for (int number : numbers) // O(n)
            System.out.println(number);

        for (int number : numbers) // O(n)
            System.out.println(number);
    }
}
What we have 2 loops here?
Here O(2n) = O(n) where we drop the constant, coz all we need here is an approximation of
this algorithm relative to it;s input size. So n and 2n, still represents a linear gross.


4. Method has two parameters
public class Main {
    public void log(int[] numbers) {
        // O(n + m)=O(2n) // so we drop number always
        for (int number : numbers) // O(n) --> n for the size of first input
            System.out.println(number);

        for (string name : names) // O(n) --> n for the size of 2nd input.
            System.out.println(name);
    }
}
Now, what if this method has two parameters?
An array of numbers and array of names.
Here, loops run in O(n) but here's the tricky part.
What is n in this case?
Here, we're not dealing with one input we have two inputs, number and names.
so we need to distinguish each between these two inputs. We could use n for the size
of the first input and m for the size of the second input.
So the run time complexity of this method is O(n + m).
And once again we can simplify this to O of N coz the run time of this method increases
linearly.


